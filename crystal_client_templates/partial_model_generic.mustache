  {{#description}}
  # {{{.}}}
  {{/description}}
  @[JSON::Serializable::Options(emit_nulls: true)]
  class {{classname}}
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    {{#hasRequired}}
    # Required properties
    {{/hasRequired}}
    {{#requiredVars}}

    {{#description}}
    # {{{.}}}
    {{/description}}
    @[JSON::Field(key: "{{{baseName}}}", type: {{^isEnum}}{{#allowableValues}}{{moduleName}}::{{/allowableValues}}{{/isEnum}}{{{dataType}}}{{#isNullable}}{{^anyOf}}?{{/anyOf}}{{/isNullable}}{{^isNullable}}{{#anyOf}}{{#-first}}?{{/-first}}{{/anyOf}}{{/isNullable}}{{#isDate}}, converter: Time::ISO8601DateConverter{{/isDate}}{{#isDateTime}}, converter: Time::RFC3339Converter{{/isDateTime}}{{#defaultValue}}, default: {{{defaultValue}}}{{/defaultValue}}{{#isNullable}}, presence: true, ignore_serialize: {{{name}}}.nil? && !{{{name}}}_present?{{/isNullable}})]
    {{#isEnum}}getter{{/isEnum}}{{^isEnum}}{{^allowableValues}}{{#hasValidation}}getter{{/hasValidation}}{{^hasValidation}}property{{/hasValidation}}{{/allowableValues}}{{#allowableValues}}getter{{/allowableValues}}{{/isEnum}} {{{name}}} : {{^isEnum}}{{#allowableValues}}{{moduleName}}::{{/allowableValues}}{{/isEnum}}{{{dataType}}}{{#isNullable}}{{^anyOf}}?{{/anyOf}}{{/isNullable}}{{^isNullable}}{{#anyOf}}{{#-first}}?{{/-first}}{{/anyOf}}{{/isNullable}}{{#defaultValue}}{{^isEnum}}{{#allowableValues}} = {{moduleName}}::{{dataType}}.new({{{defaultValue}}}){{/allowableValues}}{{^allowableValues}} = {{{defaultValue}}}{{/allowableValues}}{{/isEnum}}{{#isEnum}} = {{{defaultValue}}}{{/isEnum}}{{/defaultValue}}
    {{#isNullable}}

    @[JSON::Field(ignore: true)]
    property? {{{name}}}_present : Bool = false
    {{/isNullable}}
    {{#isEnum}}

    {{#lambda.uppercase}}enum_validator_for_{{{name}}}{{/lambda.uppercase}} = EnumValidator.new("{{{name}}}", "{{{dataType}}}", [{{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}}, {{/-last}}{{/enumVars}}{{/allowableValues}}])
    {{/isEnum}}
    {{/requiredVars}}
    {{#hasOptional}}

    # Optional properties
    {{/hasOptional}}
    {{#optionalVars}}

    {{#description}}
    # {{{.}}}
    {{/description}}
    @[JSON::Field(key: "{{{baseName}}}", type: {{^isEnum}}{{#allowableValues}}{{moduleName}}::{{/allowableValues}}{{/isEnum}}{{{dataType}}}?{{#isDate}}, converter: Time::ISO8601DateConverter{{/isDate}}{{#isDateTime}}, converter: Time::RFC3339Converter{{/isDateTime}}{{#defaultValue}}, default: {{{defaultValue}}}{{/defaultValue}}, presence: true, ignore_serialize: {{{name}}}.nil? && !{{{name}}}_present?)]
    {{#isEnum}}getter{{/isEnum}}{{^isEnum}}{{^allowableValues}}{{#hasValidation}}getter{{/hasValidation}}{{^hasValidation}}property{{/hasValidation}}{{/allowableValues}}{{#allowableValues}}getter{{/allowableValues}}{{/isEnum}} {{{name}}} : {{^isEnum}}{{#allowableValues}}{{moduleName}}::{{/allowableValues}}{{/isEnum}}{{{dataType}}}?{{#defaultValue}}{{^isEnum}}{{#allowableValues}} = {{moduleName}}::{{dataType}}.new({{{defaultValue}}}){{/allowableValues}}{{^allowableValues}} = {{{defaultValue}}}{{/allowableValues}}{{/isEnum}}{{#isEnum}} = {{{defaultValue}}}{{/isEnum}}{{/defaultValue}}

    @[JSON::Field(ignore: true)]
    property? {{{name}}}_present : Bool = false
    {{#isEnum}}

    {{#lambda.uppercase}}enum_validator_for_{{{name}}}{{/lambda.uppercase}} = EnumValidator.new("{{{name}}}", "{{#isContainer}}{{#items}}{{{dataType}}}{{/items}}{{/isContainer}}{{^isContainer}}{{{dataType}}}{{/isContainer}}", [{{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}}, {{/-last}}{{/enumVars}}{{/allowableValues}}])
    {{/isEnum}}
    {{/optionalVars}}
    {{#anyOf}}
    {{#-first}}
    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
    {{/-first}}
      {{moduleName}}::{{{.}}}{{^-last}},{{/-last}}
    {{#-last}}
      ]
    end

    {{/-last}}
    {{/anyOf}}
    {{#allOf}}
    {{#-first}}
    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
    {{/-first}}
      {{moduleName}}::{{{.}}}{{^-last}},{{/-last}}
    {{#-last}}
      ]
    end

    {{/-last}}
    {{/allOf}}
    {{#discriminator}}

    {{#propertyName}}
    # discriminator's property name in OpenAPI v3
    def self.openapi_discriminator_name
      "{{{.}}}"
    end
    {{/propertyName}}
    {{/discriminator}}

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      {{#hasVars}}*,{{/hasVars}}
      {{#hasRequired}}
      # Required properties
      {{/hasRequired}}
      {{#requiredVars}}
      @{{{name}}} : {{^isEnum}}{{#allowableValues}}{{moduleName}}::{{/allowableValues}}{{/isEnum}}{{{dataType}}}{{#isNullable}}{{^anyOf}}?{{/anyOf}}{{/isNullable}}{{^isNullable}}{{#anyOf}}{{#-first}}?{{/-first}}{{/anyOf}}{{/isNullable}}{{#defaultValue}}{{^isEnum}}{{#allowableValues}} = {{moduleName}}::{{dataType}}.new({{{defaultValue}}}){{/allowableValues}}{{^allowableValues}} = {{{defaultValue}}}{{/allowableValues}}{{/isEnum}}{{#isEnum}} = {{{defaultValue}}}{{/isEnum}}{{/defaultValue}}{{^defaultValue}}{{#anyOf}}{{#-first}} = nil{{/-first}}{{/anyOf}}{{/defaultValue}}{{^-last}}, {{/-last}}{{#-last}}{{#hasOptional}},{{/hasOptional}}{{/-last}}
      {{/requiredVars}}
      {{#hasOptional}}
      # Optional properties
      {{/hasOptional}}
      {{#optionalVars}}
      @{{{name}}} : {{^isEnum}}{{#allowableValues}}{{moduleName}}::{{/allowableValues}}{{/isEnum}}{{{dataType}}}?{{^defaultValue}} = nil{{/defaultValue}}{{#defaultValue}}{{^isEnum}}{{#allowableValues}} = {{moduleName}}::{{dataType}}.new({{{defaultValue}}}){{/allowableValues}}{{^allowableValues}} = {{{defaultValue}}}{{/allowableValues}}{{/isEnum}}{{#isEnum}} = {{{defaultValue}}}{{/isEnum}}{{/defaultValue}}{{^-last}},{{/-last}}
      {{/optionalVars}}
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
{{#requiredVars}}{{>partial_model_list_invalid_properties}}{{/requiredVars}}{{#optionalVars}}{{>partial_model_list_invalid_properties}}{{/optionalVars}}
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
{{#requiredVars}}{{>partial_model_valid}}{{/requiredVars}}{{#optionalVars}}{{>partial_model_valid}}{{/optionalVars}}
      {{#anyOf}}
      {{#-first}}
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      {{/-first}}
      {{/anyOf}}
      true
    end
{{#requiredVars}}{{>partial_model_setter}}{{/requiredVars}}{{#optionalVars}}{{>partial_model_setter}}{{/optionalVars}}
    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash({{#requiredVars}}@{{{name}}}{{^-last}}, {{/-last}}{{/requiredVars}}{{#hasRequired}}{{#hasOptional}}, {{/hasOptional}}{{/hasRequired}}{{#optionalVars}}@{{{name}}}{{^-last}}, {{/-last}}{{/optionalVars}})
  end