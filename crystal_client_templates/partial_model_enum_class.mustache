  class {{classname}}
    include OpenApi::Validatable
    include OpenApi::Json

    property data : {{dataType}}

    ERROR_MESSAGE = %{invalid value for "{{{name}}}", must be one of [{{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}}, {{/-last}}{{/enumVars}}{{/allowableValues}}].}

    VALID_VALUES = StaticArray[{{#allowableValues}}{{#enumVars}}{{#isContainer}}{{^items.isString}}{{{items.dataType}}}.new({{/items.isString}}{{/isContainer}}{{^isContainer}}{{^isString}}{{{dataType}}}.new({{/isString}}{{/isContainer}}{{{value}}}{{#isContainer}}{{^items.isString}}){{/items.isString}}{{/isContainer}}{{^isContainer}}{{^isString}}){{/isString}}{{/isContainer}}{{^-last}}, {{/-last}}{{/enumVars}}{{/allowableValues}}]

    delegate to_json_object_key, to: @data

    def self.from_json(value : JSON::PullParser) : {{classname}}
      new(value)
    end

    def self.to_json(value : {{classname}}, json : JSON::Builder) : Nil
      value.to_json(json)
    end

    def self.new(pull : JSON::PullParser)
      new({{dataType}}.new(pull))
    end

    def self.from_json_object_key?(key : String)
      {{dataType}}.from_json_object_key?(key)
    end

    def self.new!(data : {{dataType}})
      new(data).tap(&.validate)
    end

    def initialize(@data : {{dataType}})
    end

    def error_message : String
      ERROR_MESSAGE
    end

    def list_invalid_properties : Array(String)
      errors = Array(String).new
      errors.push(error_message) unless valid?
      errors
    end

    def valid? : Bool
      OpenApi::EnumValidator.valid?("{{{name}}}", data, VALID_VALUES, false)
    end

    def validate : Nil
      OpenApi::EnumValidator.validate("{{{name}}}", data, VALID_VALUES, false)
    end

    def to_json(json : JSON::Builder) : Nil
      @data.to_json(json)
    end

    def_equals_and_hash(@data)
  end