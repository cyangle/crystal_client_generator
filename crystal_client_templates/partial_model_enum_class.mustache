  class {{classname}}
    property data : {{dataType}}

    {{#lambda.uppercase}}enum_validator{{/lambda.uppercase}} = EnumValidator.new("{{{name}}}", "{{{dataType}}}", [{{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}}, {{/-last}}{{/enumVars}}{{/allowableValues}}])

    delegate to_json_object_key, to: @data
    delegate error_message, to: {{#lambda.uppercase}}enum_validator{{/lambda.uppercase}}

    def self.from_json(value : JSON::PullParser) : {{classname}}
      new(value)
    end

    def self.to_json(value : {{classname}}, json : JSON::Builder) : Nil
      value.to_json(json)
    end

    def self.new(pull : JSON::PullParser)
      new({{dataType}}.new(pull))
    end

    def self.from_json_object_key?(key : String)
      {{dataType}}.from_json_object_key?(key)
    end

    def self.new!(data : {{dataType}})
      new(data).tap(&.valid!)
    end

    def initialize(@data : {{dataType}})
    end

    def valid?
      {{#lambda.uppercase}}enum_validator{{/lambda.uppercase}}.valid?(@data, false)
    end

    def valid!
      {{#lambda.uppercase}}enum_validator{{/lambda.uppercase}}.valid!(@data, false)
    end

    def to_json(json : JSON::Builder) : Nil
      @data.to_json(json)
    end

    def_equals_and_hash(@data)
  end