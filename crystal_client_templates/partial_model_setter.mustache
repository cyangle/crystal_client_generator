
    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] {{{name}}} Object to be assigned
    def {{{name}}}=(new_value : {{>partial_model_generic_property_data_type}})
      {{#vendorExtensions}}
      {{^x-bypass-validation}}

      {{#required}}
      {{^isNullable}}
      raise ArgumentError.new("\"{{{name}}}\" is required and cannot be null") if new_value.nil?
      {{/isNullable}}
      {{/required}}
      unless new_value.nil?
      {{#isEnum}}
        OpenApi::EnumValidator.validate("{{{name}}}", new_value, {{#lambda.uppercase}}valid_values_for_{{{name}}}{{/lambda.uppercase}})
      {{/isEnum}}
      {{^isEnum}}
      {{^allowableValues}}
      {{#isModel}}
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      {{/isModel}}
      {{#isContainer}}
      {{#items.isModel}}
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?({{#isArray}}Array{{/isArray}}{{#isMap}}Hash{{/isMap}})
      {{/items.isModel}}
      {{/isContainer}}
      {{#hasValidation}}
      {{#maxLength}}
        OpenApi::PrimitiveValidator.validate_max_length("{{{name}}}", {{^isDate}}{{^isDateTime}}new_value.to_s{{/isDateTime}}{{/isDate}}{{#isDate}}Time::Format::ISO_8601_DATE.format(new_value){{/isDate}}{{#isDateTime}}Time::Format::RFC_3339.format(new_value){{/isDateTime}}.size, {{#lambda.uppercase}}max_length_for_{{{name}}}{{/lambda.uppercase}})
      {{/maxLength}}
      {{#minLength}}
        OpenApi::PrimitiveValidator.validate_min_length("{{{name}}}", {{^isDate}}{{^isDateTime}}new_value.to_s{{/isDateTime}}{{/isDate}}{{#isDate}}Time::Format::ISO_8601_DATE.format(new_value){{/isDate}}{{#isDateTime}}Time::Format::RFC_3339.format(new_value){{/isDateTime}}.size, {{#lambda.uppercase}}min_length_for_{{{name}}}{{/lambda.uppercase}})
      {{/minLength}}
      {{#maximum}}
        OpenApi::PrimitiveValidator.validate_max_number("{{{name}}}", new_value, {{#lambda.uppercase}}max_for_{{{name}}}{{/lambda.uppercase}}{{#exclusiveMaximum}}, true{{/exclusiveMaximum}})
      {{/maximum}}
      {{#minimum}}
        OpenApi::PrimitiveValidator.validate_min_number("{{{name}}}", new_value, {{#lambda.uppercase}}min_for_{{{name}}}{{/lambda.uppercase}}{{#exclusiveMinimum}}, true{{/exclusiveMinimum}})
      {{/minimum}}
      {{#maxItems}}
        OpenApi::PrimitiveValidator.validate_max_items("{{{name}}}", new_value.size, {{#lambda.uppercase}}max_items_for_{{{name}}}{{/lambda.uppercase}})
      {{/maxItems}}
      {{#minItems}}
        OpenApi::PrimitiveValidator.validate_min_items("{{{name}}}", new_value.size, {{#lambda.uppercase}}min_items_for_{{{name}}}{{/lambda.uppercase}})
      {{/minItems}}
      {{#pattern}}
        OpenApi::PrimitiveValidator.validate_pattern("{{{name}}}", new_value, {{#lambda.uppercase}}pattern_for_{{{name}}}{{/lambda.uppercase}})
      {{/pattern}}
      {{/hasValidation}}
      {{/allowableValues}}
      {{#allowableValues}}
        new_value.validate
      {{/allowableValues}}
      {{/isEnum}}
      end

      {{/x-bypass-validation}}
      {{/vendorExtensions}}
      @{{{name}}} = new_value
    end