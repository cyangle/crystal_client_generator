
    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] {{{name}}} Object to be assigned
    def {{{name}}}=({{{name}}} : {{>partial_model_generic_property_data_type}})
      if {{{name}}}.nil?
      {{#required}}
        {{#isNullable}}
        return @{{{name}}} = nil
        {{/isNullable}}
        {{^isNullable}}
        raise ArgumentError.new("\"{{{name}}}\" is required and cannot be null")
        {{/isNullable}}
      {{/required}}
      {{^required}}
        return @{{{name}}} = nil
      {{/required}}
      end
      _{{{name}}} = {{{name}}}.not_nil!
    {{#isEnum}}
    {{#isContainer}}
      {{#lambda.uppercase}}enum_validator_for_{{{name}}}{{/lambda.uppercase}}.all_valid!(_{{{name}}}{{#isMap}}.values{{/isMap}})
    {{/isContainer}}
    {{^isContainer}}
      {{#lambda.uppercase}}enum_validator_for_{{{name}}}{{/lambda.uppercase}}.valid!(_{{{name}}})
    {{/isContainer}}
    {{/isEnum}}
    {{^isEnum}}
    {{^allowableValues}}
    {{#isModel}}
      if _{{{name}}}.is_a?(OpenApi::Validatable)
        _{{{name}}}.validate
      end
    {{/isModel}}
    {{#isContainer}}
    {{#items.isModel}}
    {{#isArray}}
      if _{{{name}}}.is_a?(Array)
        _{{{name}}}.each do |item|
          if item.is_a?(OpenApi::Validatable)
            item.validate
          end
        end
      end
    {{/isArray}}
    {{#isMap}}
      if _{{{name}}}.is_a?(Hash)
        _{{{name}}}.each do |_key, value|
          if value.is_a?(OpenApi::Validatable)
            value.validate
          end
        end
      end
    {{/isMap}}
    {{/items.isModel}}
    {{/isContainer}}
    {{#hasValidation}}
      {{#maxLength}}
      if _{{{name}}}.to_s.size > {{{maxLength}}}
        raise ArgumentError.new("invalid value for \"{{{name}}}\", the character length must be smaller than or equal to {{{maxLength}}}.")
      end

      {{/maxLength}}
      {{#minLength}}
      if _{{{name}}}.to_s.size < {{{minLength}}}
        raise ArgumentError.new("invalid value for \"{{{name}}}\", the character length must be great than or equal to {{{minLength}}}.")
      end

      {{/minLength}}
      {{#maximum}}
      if _{{{name}}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{{maximum}}}
        raise ArgumentError.new("invalid value for \"{{{name}}}\", must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{{maximum}}}.")
      end

      {{/maximum}}
      {{#minimum}}
      if _{{{name}}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{{minimum}}}
        raise ArgumentError.new("invalid value for \"{{{name}}}\", must be greater than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{{minimum}}}.")
      end

      {{/minimum}}
      {{#pattern}}
      pattern = {{{pattern}}}
      if _{{{name}}} !~ pattern
        raise ArgumentError.new("invalid value for \"{{{name}}}\", must conform to the pattern #{pattern}.")
      end

      {{/pattern}}
      {{#maxItems}}
      if _{{{name}}}.size > {{{maxItems}}}
        raise ArgumentError.new("invalid value for \"{{{name}}}\", number of items must be less than or equal to {{{maxItems}}}.")
      end

      {{/maxItems}}
      {{#minItems}}
      if _{{{name}}}.size < {{{minItems}}}
        raise ArgumentError.new("invalid value for \"{{{name}}}\", number of items must be greater than or equal to {{{minItems}}}.")
      end

      {{/minItems}}
    {{/hasValidation}}
    {{/allowableValues}}
    {{#allowableValues}}
      _{{{name}}}.valid!
    {{/allowableValues}}
    {{/isEnum}}
      @{{{name}}} = _{{{name}}}
    end