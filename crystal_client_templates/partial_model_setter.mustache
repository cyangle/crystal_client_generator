    {{#isEnum}}

    {{#isContainer}}
    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] {{{name}}} Object to be assigned
    def {{{name}}}=({{{name}}} : {{dataType}}{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}?{{/required}})
      {{#lambda.uppercase}}enum_validator_for_{{{name}}}{{/lambda.uppercase}}.all_valid!({{{name}}}{{#isMap}}.try(&.values){{/isMap}}{{#required}}{{^isNullable}}, false{{/isNullable}}{{/required}})
      @{{{name}}} = {{{name}}}
    end
    {{/isContainer}}
    {{^isContainer}}
    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] {{{name}}} Object to be assigned
    def {{{name}}}=({{{name}}} : {{dataType}}{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}?{{/required}})
      {{#lambda.uppercase}}enum_validator_for_{{{name}}}{{/lambda.uppercase}}.valid!({{{name}}}{{#required}}{{^isNullable}}, false{{/isNullable}}{{/required}})
      @{{{name}}} = {{{name}}}
    end
    {{/isContainer}}
    {{/isEnum}}
    {{^isEnum}}
    {{^allowableValues}}
    {{#hasValidation}}

    # Custom attribute writer method with validation
    # @param [Object] {{{name}}} Value to be assigned
    def {{{name}}}=({{{name}}})
      {{#maxLength}}
      if {{^required}}!{{{name}}}.nil? && {{/required}}{{{name}}}.to_s.size > {{{maxLength}}}
        raise ArgumentError.new("invalid value for \"{{{name}}}\", the character length must be smaller than or equal to {{{maxLength}}}.")
      end

      {{/maxLength}}
      {{#minLength}}
      if {{^required}}!{{{name}}}.nil? && {{/required}}{{{name}}}.to_s.size < {{{minLength}}}
        raise ArgumentError.new("invalid value for \"{{{name}}}\", the character length must be great than or equal to {{{minLength}}}.")
      end

      {{/minLength}}
      {{#maximum}}
      if {{^required}}!{{{name}}}.nil? && {{/required}}{{{name}}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{{maximum}}}
        raise ArgumentError.new("invalid value for \"{{{name}}}\", must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{{maximum}}}.")
      end

      {{/maximum}}
      {{#minimum}}
      if {{^required}}!{{{name}}}.nil? && {{/required}}{{{name}}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{{minimum}}}
        raise ArgumentError.new("invalid value for \"{{{name}}}\", must be greater than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{{minimum}}}.")
      end

      {{/minimum}}
      {{#pattern}}
      pattern = {{{pattern}}}
      if {{^required}}!{{{name}}}.nil? && {{/required}}{{{name}}} !~ pattern
        raise ArgumentError.new("invalid value for \"{{{name}}}\", must conform to the pattern #{pattern}.")
      end

      {{/pattern}}
      {{#maxItems}}
      if {{^required}}!{{{name}}}.nil? && {{/required}}{{{name}}}.size > {{{maxItems}}}
        raise ArgumentError.new("invalid value for \"{{{name}}}\", number of items must be less than or equal to {{{maxItems}}}.")
      end

      {{/maxItems}}
      {{#minItems}}
      if {{^required}}!{{{name}}}.nil? && {{/required}}{{{name}}}.size < {{{minItems}}}
        raise ArgumentError.new("invalid value for \"{{{name}}}\", number of items must be greater than or equal to {{{minItems}}}.")
      end

      {{/minItems}}
      @{{{name}}} = {{{name}}}
    end
    {{/hasValidation}}
    {{/allowableValues}}
    {{#allowableValues}}
    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] {{{name}}} Object to be assigned
    def {{{name}}}=({{{name}}} : {{dataType}}{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}?{{/required}})
      {{{name}}}{{#required}}{{^isNullable}}.valid!{{/isNullable}}{{/required}}{{#required}}{{#isNullable}}.try(&.valid!){{/isNullable}}{{/required}}{{^required}}.try(&.valid!){{/required}}
      @{{{name}}} = {{{name}}}
    end
    {{/allowableValues}}
    {{/isEnum}}