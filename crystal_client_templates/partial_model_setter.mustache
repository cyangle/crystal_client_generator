
    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] {{{name}}} Object to be assigned
    def {{{name}}}=({{{name}}} : {{>partial_model_generic_property_data_type}})
      if {{{name}}}.nil?
      {{#required}}
        {{#isNullable}}
        return @{{{name}}} = nil
        {{/isNullable}}
        {{^isNullable}}
        raise ArgumentError.new("\"{{{name}}}\" is required and cannot be null")
        {{/isNullable}}
      {{/required}}
      {{^required}}
        return @{{{name}}} = nil
      {{/required}}
      end
      _{{{name}}} = {{{name}}}.not_nil!
    {{#isEnum}}
    {{#isContainer}}
      {{#lambda.uppercase}}enum_validator_for_{{{name}}}{{/lambda.uppercase}}.all_valid!(_{{{name}}}{{#isMap}}.values{{/isMap}})
    {{/isContainer}}
    {{^isContainer}}
      {{#lambda.uppercase}}enum_validator_for_{{{name}}}{{/lambda.uppercase}}.valid!(_{{{name}}})
    {{/isContainer}}
    {{/isEnum}}
    {{^isEnum}}
    {{^allowableValues}}
    {{#isModel}}
      _{{{name}}}.validate if _{{{name}}}.is_a?(OpenApi::Validatable)
    {{/isModel}}
    {{#isContainer}}
    {{#items.isModel}}
    {{#isArray}}
      OpenApi::ArrayValidator.validate(array: _{{{name}}}) if _{{{name}}}.is_a?(Array)
    {{/isArray}}
    {{#isMap}}
      OpenApi::HashValidator.validate(hash: _{{{name}}}) if _{{{name}}}.is_a?(Hash)
    {{/isMap}}
    {{/items.isModel}}
    {{/isContainer}}
    {{#hasValidation}}
      {{#maxLength}}
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("{{{name}}}", _{{{name}}}.to_s.size, {{{maxLength}}})
        raise ArgumentError.new(max_length_error)
      end

      {{/maxLength}}
      {{#minLength}}
      if min_length_error = OpenApi::PrimitiveValidator.min_length_error("{{{name}}}", _{{{name}}}.to_s.size, {{{minLength}}})
        raise ArgumentError.new(min_length_error)
      end

      {{/minLength}}
      {{#maximum}}
      if max_number_error = OpenApi::PrimitiveValidator.max_number_error("{{{name}}}", _{{{name}}}, {{{maximum}}})
        raise ArgumentError.new(max_number_error)
      end

      {{/maximum}}
      {{#minimum}}
      if min_number_error = OpenApi::PrimitiveValidator.min_number_error("{{{name}}}", _{{{name}}}, {{{minimum}}})
        raise ArgumentError.new(min_number_error)
      end

      {{/minimum}}
      {{#pattern}}
      if pattern_error = OpenApi::PrimitiveValidator.pattern_error("{{{name}}}", _{{{name}}}, {{#lambda.uppercase}}pattern_for_{{{name}}}{{/lambda.uppercase}})
        raise ArgumentError.new(pattern_error)
      end

      {{/pattern}}
      {{#maxItems}}
      if max_items_error = OpenApi::PrimitiveValidator.max_items_error("{{{name}}}", _{{{name}}}.size, {{{maxItems}}})
        raise ArgumentError.new(max_items_error)
      end

      {{/maxItems}}
      {{#minItems}}
      if min_items_error = OpenApi::PrimitiveValidator.min_items_error("{{{name}}}", _{{{name}}}.size, {{{minItems}}})
        raise ArgumentError.new(min_items_error)
      end

      {{/minItems}}
    {{/hasValidation}}
    {{/allowableValues}}
    {{#allowableValues}}
      _{{{name}}}.valid!
    {{/allowableValues}}
    {{/isEnum}}
      @{{{name}}} = _{{{name}}}
    end