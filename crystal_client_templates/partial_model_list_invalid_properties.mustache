      {{#isEnum}}
      {{#isContainer}}

      invalid_properties.push({{#lambda.uppercase}}enum_validator_for_{{{name}}}{{/lambda.uppercase}}.error_message) unless {{#lambda.uppercase}}enum_validator_for_{{{name}}}{{/lambda.uppercase}}.all_valid?(@{{{name}}}{{#isMap}}.try(&.values){{/isMap}}{{#required}}{{^isNullable}}, false{{/isNullable}}{{/required}})
      {{/isContainer}}
      {{^isContainer}}

      invalid_properties.push({{#lambda.uppercase}}enum_validator_for_{{{name}}}{{/lambda.uppercase}}.error_message) unless {{#lambda.uppercase}}enum_validator_for_{{{name}}}{{/lambda.uppercase}}.valid?(@{{{name}}}{{#required}}{{^isNullable}}, false{{/isNullable}}{{/required}})
      {{/isContainer}}
      {{/isEnum}}
      {{^isEnum}}
      {{#required}}
      {{^isNullable}}
      invalid_properties.push("\"{{{name}}}\" is required and cannot be null") if @{{{name}}}.nil?
      {{/isNullable}}
      {{/required}}
      if _{{{name}}} = @{{{name}}}
      {{^allowableValues}}
      {{#isModel}}
        invalid_properties.concat(_{{{name}}}.list_invalid_properties_for("{{{name}}}")) if _{{{name}}}.is_a?(OpenApi::Validatable)
      {{/isModel}}
      {{#isContainer}}
        {{#items.isModel}}
          {{#isArray}}
        
        invalid_properties.concat(OpenApi::ArrayValidator.list_invalid_properties_for(key: "{{{name}}}", array: _{{{name}}})) if _{{{name}}}.is_a?(Array)
          {{/isArray}}
          {{#isMap}}
        invalid_properties.concat(OpenApi::HashValidator.list_invalid_properties_for(key: "{{{name}}}", hash: _{{{name}}})) if _{{{name}}}.is_a?(Hash)
          {{/isMap}}
        {{/items.isModel}}
      {{/isContainer}}
      {{#hasValidation}}
        {{#maxLength}}
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("{{{name}}}", _{{{name}}}.to_s.size, {{{maxLength}}})
          invalid_properties.push(max_length_error)
        end
        {{/maxLength}}
        {{#minLength}}

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("{{{name}}}", _{{{name}}}.to_s.size, {{{minLength}}})
          invalid_properties.push(min_length_error)
        end
        {{/minLength}}
        {{#maximum}}

        if max_number_error = OpenApi::PrimitiveValidator.max_number_error("{{{name}}}", _{{{name}}}, {{{maximum}}})
          invalid_properties.push(max_number_error)
        end
        {{/maximum}}
        {{#minimum}}

        if min_number_error = OpenApi::PrimitiveValidator.min_number_error("{{{name}}}", _{{{name}}}, {{{minimum}}})
          invalid_properties.push(min_number_error)
        end
        {{/minimum}}
        {{#pattern}}

        if pattern_error = OpenApi::PrimitiveValidator.pattern_error("{{{name}}}", _{{{name}}}, {{#lambda.uppercase}}pattern_for_{{{name}}}{{/lambda.uppercase}})
          invalid_properties.push(pattern_error)
        end
        {{/pattern}}
        {{#maxItems}}

        if max_items_error = OpenApi::PrimitiveValidator.max_items_error("{{{name}}}", _{{{name}}}.size, {{{maxItems}}})
          invalid_properties.push(max_items_error)
        end
        {{/maxItems}}
        {{#minItems}}

        if min_items_error = OpenApi::PrimitiveValidator.min_items_error("{{{name}}}", _{{{name}}}.size, {{{minItems}}})
          invalid_properties.push(min_items_error)
        end
        {{/minItems}}
      {{/hasValidation}}
      {{/allowableValues}}
      {{#allowableValues}}

        invalid_properties.push(_{{{name}}}.error_message) if !_{{{name}}}.valid?
      {{/allowableValues}}
      end
      {{/isEnum}}