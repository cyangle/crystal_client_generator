      {{#isEnum}}
      {{#isContainer}}

      invalid_properties.push({{#lambda.uppercase}}enum_validator_for_{{{name}}}{{/lambda.uppercase}}.error_message) unless {{#lambda.uppercase}}enum_validator_for_{{{name}}}{{/lambda.uppercase}}.all_valid?(@{{{name}}}{{#isMap}}.try(&.values){{/isMap}}{{#required}}{{^isNullable}}, false{{/isNullable}}{{/required}})
      {{/isContainer}}
      {{^isContainer}}

      invalid_properties.push({{#lambda.uppercase}}enum_validator_for_{{{name}}}{{/lambda.uppercase}}.error_message) unless {{#lambda.uppercase}}enum_validator_for_{{{name}}}{{/lambda.uppercase}}.valid?(@{{{name}}}{{#required}}{{^isNullable}}, false{{/isNullable}}{{/required}})
      {{/isContainer}}
      {{/isEnum}}
      {{^isEnum}}
      {{#required}}
      {{^isNullable}}
      invalid_properties.push("\"{{{name}}}\" is required and cannot be null") if @{{{name}}}.nil?
      {{/isNullable}}
      {{/required}}
      {{^allowableValues}}
      {{#isModel}}
      invalid_properties.concat(@{{{name}}}.as?(OpenApi::Validatable).try &.list_invalid_properties_for("{{{name}}}") || Array(String).new)
      {{/isModel}}
      {{#isContainer}}
        {{#items.isModel}}
          {{#isArray}}
      {{{name}}}.try &.each do |item|
        invalid_properties.concat(item.as?(OpenApi::Validatable).try &.list_invalid_properties_for("{{{name}}}") || Array(String).new)
      end
          {{/isArray}}
          {{#isMap}}
      {{{name}}}.try &.each do |_key, value|
        invalid_properties.concat(value.as?(OpenApi::Validatable).try &.list_invalid_properties_for("{{{name}}}") || Array(String).new)
      end
          {{/isMap}}
        {{/items.isModel}}
      {{/isContainer}}
      {{#hasValidation}}
      if _{{{name}}} = @{{{name}}}
        {{#maxLength}}
        if _{{{name}}}.to_s.size > {{{maxLength}}}
          invalid_properties.push("invalid value for \"{{{name}}}\", the character length must be smaller than or equal to {{{maxLength}}}.")
        end
        {{/maxLength}}
        {{#minLength}}

        if _{{{name}}}.to_s.size < {{{minLength}}}
          invalid_properties.push("invalid value for \"{{{name}}}\", the character length must be great than or equal to {{{minLength}}}.")
        end
        {{/minLength}}
        {{#maximum}}

        if _{{{name}}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{{maximum}}}
          invalid_properties.push("invalid value for \"{{{name}}}\", must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{{maximum}}}.")
        end
        {{/maximum}}
        {{#minimum}}

        if _{{{name}}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{{minimum}}}
          invalid_properties.push("invalid value for \"{{{name}}}\", must be greater than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{{minimum}}}.")
        end
        {{/minimum}}
        {{#pattern}}

        pattern = {{{pattern}}}
        if _{{{name}}} !~ pattern
          invalid_properties.push("invalid value for \"{{{name}}}\", must conform to the pattern #{pattern}.")
        end
        {{/pattern}}
        {{#maxItems}}

        if _{{{name}}}.size > {{{maxItems}}}
          invalid_properties.push("invalid value for \"{{{name}}}\", number of items must be less than or equal to {{{maxItems}}}."
        end
        {{/maxItems}}
        {{#minItems}}

        if _{{{name}}}.size < {{{minItems}}}
          invalid_properties.push("invalid value for \"{{{name}}}\", number of items must be greater than or equal to {{{minItems}}}."
        end
        {{/minItems}}
      end
      {{/hasValidation}}
      {{/allowableValues}}
      {{#allowableValues}}

      invalid_properties.push(@{{{name}}}.not_nil!.error_message) if !@{{{name}}}.nil? && !@{{{name}}}.not_nil!.valid?
      {{/allowableValues}}
      {{/isEnum}}