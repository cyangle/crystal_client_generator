# {{#lambdaPrefixWithHash}}{{> api_info}}{{/lambdaPrefixWithHash}}

require "uri"

module {{moduleName}}
{{#operations}}
  class {{classname}}
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
{{#operation}}

    {{#summary}}
    # {{{.}}}
    {{/summary}}
    {{#notes}}
    # {{{.}}}
    {{/notes}}
    {{#allParams}}
    {{#required}}
    # @param {{paramName}} [{{{dataType}}}{{^required}}?{{/required}}]{{#description}} {{{description}}}{{/description}}
    {{/required}}
    {{/allParams}}
    # @return [{{{returnType}}}{{^returnType}}nil{{/returnType}}]
    def {{operationId}}({{#hasParams}}{{^hasOnlyOneParam}}*, {{/hasOnlyOneParam}}{{/hasParams}}{{#requiredParams}}{{paramName}} : {{{dataType}}}{{#isNullable}} | Null{{/isNullable}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#hasRequiredParams}}{{#hasOptionalParams}}, {{/hasOptionalParams}}{{/hasRequiredParams}}{{#optionalParams}}{{paramName}} : {{{dataType}}}?{{#isNullable}} | Null{{/isNullable}}{{^defaultValue}} = nil{{/defaultValue}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{^-last}}, {{/-last}}{{/optionalParams}})
      {{#returnType}}data, _status_code, _headers = {{/returnType}}{{operationId}}_with_http_info({{#allParams}}{{paramName}}: {{paramName}}{{^-last}}, {{/-last}}{{/allParams}})
      {{#returnType}}data{{/returnType}}{{^returnType}}nil{{/returnType}}
    end

    {{#summary}}
    # {{.}}
    {{/summary}}
    {{#notes}}
    # {{.}}
    {{/notes}}
    {{#allParams}}
    {{#required}}
    # @param {{paramName}} [{{{dataType}}}{{^required}}?{{/required}}]{{#description}} {{{description}}}{{/description}}
    {{/required}}
    {{/allParams}}
    # @return [Array<({{{returnType}}}{{^returnType}}nil{{/returnType}}, Integer, Hash)>] {{#returnType}}{{{.}}} data{{/returnType}}{{^returnType}}nil{{/returnType}}, response status code and response headers
    def {{operationId}}_with_http_info({{#hasParams}}{{^hasOnlyOneParam}}*, {{/hasOnlyOneParam}}{{/hasParams}}{{#requiredParams}}{{paramName}} : {{{dataType}}}{{#isNullable}} | Null{{/isNullable}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#hasRequiredParams}}{{#hasOptionalParams}}, {{/hasOptionalParams}}{{/hasRequiredParams}}{{#optionalParams}}{{paramName}} : {{{dataType}}}?{{#isNullable}} | Null{{/isNullable}}{{^defaultValue}} = nil{{/defaultValue}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{^-last}}, {{/-last}}{{/optionalParams}})
      request = build_{{operationId}}_request({{#allParams}}{{paramName}}: {{paramName}}{{^-last}}, {{/-last}}{{/allParams}})

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: {{classname}}#{{operationId}}\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return {{#returnType}}{{{.}}}.from_nason(data){{/returnType}}{{^returnType}}nil{{/returnType}}, status_code, headers
    end

    {{#summary}}
    # {{.}}
    {{/summary}}
    {{#notes}}
    # {{.}}
    {{/notes}}
    {{#allParams}}
    {{#required}}
    # @param {{paramName}} [{{{dataType}}}{{^required}}?{{/required}}]{{#description}} {{{description}}}{{/description}}
    {{/required}}
    {{/allParams}}
    # @return nil
    def {{operationId}}({{#hasParams}}{{^hasOnlyOneParam}}*, {{/hasOnlyOneParam}}{{/hasParams}}{{#requiredParams}}{{paramName}} : {{{dataType}}}{{#isNullable}} | Null{{/isNullable}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#hasRequiredParams}}{{#hasOptionalParams}}, {{/hasOptionalParams}}{{/hasRequiredParams}}{{#optionalParams}}{{paramName}} : {{{dataType}}}?{{#isNullable}} | Null{{/isNullable}}{{^defaultValue}} = nil{{/defaultValue}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{^-last}}, {{/-last}}{{/optionalParams}}{{#hasParams}}, {{/hasParams}}&block : Crest::Response ->)
      request = build_{{operationId}}_request({{#allParams}}{{paramName}}: {{paramName}}{{^-last}}, {{/-last}}{{/allParams}})

      request.execute do |response|
        block.call(response)
      end
    end

    # @return Crest::Request
    def build_{{operationId}}_request({{#hasParams}}{{^hasOnlyOneParam}}*, {{/hasOnlyOneParam}}{{/hasParams}}{{#requiredParams}}{{paramName}} : {{{dataType}}}{{#isNullable}} | Null{{/isNullable}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#hasRequiredParams}}{{#hasOptionalParams}}, {{/hasOptionalParams}}{{/hasRequiredParams}}{{#optionalParams}}{{paramName}} : {{{dataType}}}?{{#isNullable}} | Null{{/isNullable}}{{^defaultValue}} = nil{{/defaultValue}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{^-last}}, {{/-last}}{{/optionalParams}}) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: {{classname}}.{{operationId}} ..." }
      end
      {{#allParams}}
      {{^isNullable}}
      {{#required}}
      {{#isEnum}}
      {{#collectionFormat}}
      # verify enum value
      allowable_values = [{{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}}, {{/-last}}{{/enumVars}}{{/allowableValues}}]
      if @api_client.config.client_side_validation && !{{{paramName}}}.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"{{{paramName}}}\", must be one of #{allowable_values}")
      end
      {{/collectionFormat}}
      {{^collectionFormat}}
      # verify enum value
      allowable_values = [{{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}}, {{/-last}}{{/enumVars}}{{/allowableValues}}]
      if @api_client.config.client_side_validation && !allowable_values.includes?({{{paramName}}})
        raise ArgumentError.new("invalid value for \"{{{paramName}}}\", must be one of #{allowable_values}")
      end
      {{/collectionFormat}}
      {{/isEnum}}
      {{/required}}
      {{/isNullable}}
      {{^required}}
      {{#isEnum}}
      {{#collectionFormat}}
      allowable_values = [{{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}}, {{/-last}}{{/enumVars}}{{/allowableValues}}]
      if @api_client.config.client_side_validation && !{{{paramName}}}.nil? && !{{{paramName}}}.null? && !{{{paramName}}}.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"{{{paramName}}}\", must include one of #{allowable_values}")
      end
      {{/collectionFormat}}
      {{^collectionFormat}}
      allowable_values = [{{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}}, {{/-last}}{{/enumVars}}{{/allowableValues}}]
      if @api_client.config.client_side_validation && !{{{paramName}}}.nil? && !{{{paramName}}}.null? && !allowable_values.includes?({{{paramName}}})
        raise ArgumentError.new("invalid value for \"{{{paramName}}}\", must be one of #{allowable_values}")
      end
      {{/collectionFormat}}
      {{/isEnum}}
      {{/required}}
      {{#hasValidation}}
      {{#maxLength}}
      if @api_client.config.client_side_validation && {{^required}}!{{{paramName}}}.nil? && {{/required}}{{#isNullable}}!@{{{name}}}.null? && {{/isNullable}}{{^isDate}}{{^isDateTime}}{{{paramName}}}.to_s{{/isDateTime}}{{/isDate}}{{#isDate}}Time::Format::ISO_8601_DATE.format({{{paramName}}}){{/isDate}}{{#isDateTime}}Time::Format::RFC_3339.format({{{paramName}}}){{/isDateTime}}.size > {{{maxLength}}}
        raise ArgumentError.new("invalid value for \"{{{paramName}}}\" when calling {{classname}}.{{operationId}}, the character length must be smaller than or equal to {{{maxLength}}}.")
      end

      {{/maxLength}}
      {{#minLength}}
      if @api_client.config.client_side_validation && {{^required}}!{{{paramName}}}.nil? && {{/required}}{{#isNullable}}!@{{{name}}}.null? && {{/isNullable}}{{^isDate}}{{^isDateTime}}{{{paramName}}}.to_s{{/isDateTime}}{{/isDate}}{{#isDate}}Time::Format::ISO_8601_DATE.format({{{paramName}}}){{/isDate}}{{#isDateTime}}Time::Format::RFC_3339.format({{{paramName}}}){{/isDateTime}}.size < {{{minLength}}}
        raise ArgumentError.new("invalid value for \"{{{paramName}}}\" when calling {{classname}}.{{operationId}}, the character length must be great than or equal to {{{minLength}}}.")
      end

      {{/minLength}}
      {{#maximum}}
      if @api_client.config.client_side_validation && {{^required}}!{{{paramName}}}.nil? && {{/required}}{{#isNullable}}!@{{{name}}}.null? && {{/isNullable}}{{{paramName}}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{{maximum}}}
        raise ArgumentError.new("invalid value for \"{{{paramName}}}\" when calling {{classname}}.{{operationId}}, must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{{maximum}}}.")
      end

      {{/maximum}}
      {{#minimum}}
      if @api_client.config.client_side_validation && {{^required}}!{{{paramName}}}.nil? && {{/required}}{{#isNullable}}!@{{{name}}}.null? && {{/isNullable}}{{{paramName}}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{{minimum}}}
        raise ArgumentError.new("invalid value for \"{{{paramName}}}\" when calling {{classname}}.{{operationId}}, must be greater than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{{minimum}}}.")
      end

      {{/minimum}}
      {{#pattern}}
      pattern = {{{pattern}}}
      if @api_client.config.client_side_validation && {{^required}}!{{{paramName}}}.nil? && {{/required}}{{#isNullable}}!@{{{name}}}.null? && {{/isNullable}}{{{paramName}}} !~ pattern
        raise ArgumentError.new("invalid value for \"{{{paramName}}}\" when calling {{classname}}.{{operationId}}, must conform to the pattern #{pattern}.")
      end

      {{/pattern}}
      {{#maxItems}}
      if @api_client.config.client_side_validation && {{^required}}!{{{paramName}}}.nil? && {{/required}}{{#isNullable}}!@{{{name}}}.null? && {{/isNullable}}{{{paramName}}}.size > {{{maxItems}}}
        raise ArgumentError.new("invalid value for \"{{{paramName}}}\" when calling {{classname}}.{{operationId}}, number of items must be less than or equal to {{{maxItems}}}.")
      end

      {{/maxItems}}
      {{#minItems}}
      if @api_client.config.client_side_validation && {{^required}}!{{{paramName}}}.nil? && {{/required}}{{#isNullable}}!@{{{name}}}.null? && {{/isNullable}}{{{paramName}}}.size < {{{minItems}}}
        raise ArgumentError.new("invalid value for \"{{{paramName}}}\" when calling {{classname}}.{{operationId}}, number of items must be greater than or equal to {{{minItems}}}.")
      end

      {{/minItems}}
      {{/hasValidation}}
      {{/allParams}}
      # resource path
      local_var_path = "{{{path}}}"{{#pathParams}}.sub("{" + "{{baseName}}" + "}", URI.encode_path({{paramName}}.to_s){{^strictSpecBehavior}}.gsub("%2F", "/"){{/strictSpecBehavior}}){{/pathParams}}

      # query parameters
      query_params = Hash(String, String).new
      {{#queryParams}}
      query_params["{{{baseName}}}"] = {{#collectionFormat}}@api_client.build_collection_param({{{paramName}}}, "{{{collectionFormat}}}"){{/collectionFormat}}{{^collectionFormat}}{{^isDate}}{{^isDateTime}}{{{paramName}}}.to_s{{/isDateTime}}{{/isDate}}{{#isDate}}Time::Format::ISO_8601_DATE.format({{{paramName}}}){{/isDate}}{{#isDateTime}}Time::Format::RFC_3339.format({{{paramName}}}){{/isDateTime}}{{/collectionFormat}} if !{{{paramName}}}.nil? && !{{{paramName}}}.null?{{#collectionFormat}} && !{{{paramName}}}.empty?{{/collectionFormat}}
      {{/queryParams}}

      # header parameters
      header_params = Hash(String, String).new
      {{#hasProduces}}
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept([{{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}}])
      {{/hasProduces}}
      {{#hasConsumes}}
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type([{{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}}])
      {{/hasConsumes}}
      {{#headerParams}}
      header_params["{{{baseName}}}"] = {{#collectionFormat}}@api_client.build_collection_param({{{paramName}}}, "{{{collectionFormat}}}"){{/collectionFormat}}{{^collectionFormat}}{{^isDate}}{{^isDateTime}}{{{paramName}}}.to_s{{/isDateTime}}{{/isDate}}{{#isDate}}Time::Format::ISO_8601_DATE.format({{{paramName}}}){{/isDate}}{{#isDateTime}}Time::Format::RFC_3339.format({{{paramName}}}){{/isDateTime}}{{/collectionFormat}} if !{{{paramName}}}.nil? && !{{{paramName}}}.null?{{#collectionFormat}} && !{{{paramName}}}.empty?{{/collectionFormat}}
      {{/headerParams}}

      # form parameters
      {{#hasFormParams}}
      form_params = Hash(String, (String | Array(String) | ::File)).new
      {{/hasFormParams}}
      {{^hasFormParams}}
      form_params = nil
      {{/hasFormParams}}
      {{#formParams}}
      {{#isFile}}
      form_params["{{baseName}}"] = {{paramName}} if !{{paramName}}.nil? && !{{paramName}}.null?
      {{/isFile}}
      {{^isFile}}
      form_params["{{baseName}}"] = {{#collectionFormat}}@api_client.build_collection_param({{{paramName}}}, "{{{collectionFormat}}}"){{/collectionFormat}}{{^collectionFormat}}{{^isDate}}{{^isDateTime}}{{{paramName}}}.to_s{{/isDateTime}}{{/isDate}}{{#isDate}}Time::Format::ISO_8601_DATE.format({{{paramName}}}){{/isDate}}{{#isDateTime}}Time::Format::RFC_3339.format({{{paramName}}}){{/isDateTime}}{{/collectionFormat}} if !{{{paramName}}}.nil? && !{{{paramName}}}.null?{{#collectionFormat}} && !{{{paramName}}}.empty?{{/collectionFormat}}
      {{/isFile}}
      {{/formParams}}

      # http body (model)
      post_body = {{#bodyParam}}{{{paramName}}}.to_nason{{/bodyParam}}{{^bodyParam}}nil{{/bodyParam}}

      # auth_names
      auth_names = {{#authMethods}}{{#-first}}[{{/-first}}"{{name}}"{{^-last}}, {{/-last}}{{#-last}}]{{/-last}}{{/authMethods}}{{^authMethods}}[] of String{{/authMethods}}

      @api_client.build_api_request(
        http_method: :"{{httpMethod}}",
        path: local_var_path,
        operation: "{{classname}}.{{operationId}}",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end
{{/operation}}
  end
{{/operations}}
end
